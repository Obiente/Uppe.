---
import Card from './ui/Card.astro';
import Heading from './ui/Heading.astro';
import Metric from './ui/Metric.astro';

interface Props {
	peerData: Array<{
		id: string;
		location: string;
		latitude: number;
		longitude: number;
		ping: number;
		status: 'online' | 'timeout' | 'error';
		lastCheck: string;
	}>;
	targetUrl: string;
}

const { peerData, targetUrl } = Astro.props;

const getStatusColor = (status: string) => {
	switch (status) {
		case 'online': return 'text-status-online';
		case 'timeout': return 'text-status-warning';
		case 'error': return 'text-status-error';
		default: return 'text-tertiary';
	}
};

const getStatusBg = (status: string) => {
	switch (status) {
		case 'online': return 'bg-status-online';
		case 'timeout': return 'bg-status-warning';
		case 'error': return 'bg-status-error';
		default: return 'bg-surface-tertiary';
	}
};

const avgPing = peerData.filter(p => p.status === 'online').reduce((acc, p) => acc + p.ping, 0) / peerData.filter(p => p.status === 'online').length || 0;
---

<Card class="p-6">
	<div class="flex items-center justify-between mb-6">
		<div>
			<Heading as="h3" size="lg">Global Ping Map</Heading>
			<p class="text-tertiary text-sm">Response times from peers worldwide</p>
		</div>
		<Metric label="avg response" value={`${Math.round(avgPing)}ms`} size="sm" />
	</div>

	<!-- World Map Simulation -->
	<div class="relative bg-surface-primary rounded-lg p-4 mb-6 overflow-hidden">
		<div class="absolute inset-0 opacity-10">
			<svg viewBox="0 0 1000 500" class="w-full h-full">
				<!-- Simplified world map outline -->
				<path d="M200 200 Q250 150 300 200 Q350 250 400 200 Q450 150 500 200 Q550 250 600 200 Q650 150 700 200 Q750 250 800 200" 
					  stroke="currentColor" stroke-width="2" fill="none" class="text-border-primary"/>
				<path d="M150 300 Q200 250 250 300 Q300 350 350 300 Q400 250 450 300 Q500 350 550 300 Q600 250 650 300 Q700 350 750 300" 
					  stroke="currentColor" stroke-width="2" fill="none" class="text-border-primary"/>
			</svg>
		</div>
		
		<!-- Peer Dots -->
		<div class="relative z-10 grid grid-cols-6 gap-4 h-32">
			{peerData.slice(0, 12).map((peer, index) => (
				<div class="relative flex items-center justify-center">
					<div class={`w-4 h-4 rounded-full ${getStatusBg(peer.status)} animate-pulse`}></div>
					<div class="absolute -top-8 left-1/2 transform -translate-x-1/2 text-xs text-tertiary whitespace-nowrap">
						{peer.ping}ms
					</div>
				</div>
			))}
		</div>
	</div>

	<!-- Peer List -->
	<div class="space-y-2 max-h-64 overflow-y-auto">
		{peerData.map((peer) => (
			<div class="flex items-center justify-between p-3 bg-surface-tertiary rounded-lg">
				<div class="flex items-center gap-3">
					<div class={`w-2 h-2 rounded-full ${getStatusBg(peer.status)}`}></div>
					<div>
						<div class="text-primary font-medium text-sm">{peer.location}</div>
						<div class="text-tertiary text-xs">{peer.id.substring(0, 8)}...</div>
					</div>
				</div>
				<div class="text-right">
					<div class={`text-sm font-medium ${getStatusColor(peer.status)}`}>
						{peer.status === 'online' ? `${peer.ping}ms` : peer.status.toUpperCase()}
					</div>
					<div class="text-tertiary text-xs">{peer.lastCheck}</div>
				</div>
			</div>
		))}
	</div>

	<!-- Legend -->
	<div class="flex items-center justify-center gap-6 mt-6 pt-4 border-t border-primary">
		<div class="flex items-center gap-2 text-sm">
			<div class="w-3 h-3 rounded-full bg-status-online"></div>
			<span class="text-tertiary">Online</span>
		</div>
		<div class="flex items-center gap-2 text-sm">
			<div class="w-3 h-3 rounded-full bg-status-warning"></div>
			<span class="text-tertiary">Timeout</span>
		</div>
		<div class="flex items-center gap-2 text-sm">
			<div class="w-3 h-3 rounded-full bg-status-error"></div>
			<span class="text-tertiary">Error</span>
		</div>
	</div>
</div>
