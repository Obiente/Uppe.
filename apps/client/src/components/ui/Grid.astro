---
export interface Props {
  cols?: '1' | '2' | '3' | '4' | '5' | '6' | '12';
  colsMd?: '1' | '2' | '3' | '4' | '5' | '6' | '12';
  colsLg?: '1' | '2' | '3' | '4' | '5' | '6' | '12';
  gap?: '1' | '2' | '3' | '4' | '5' | '6' | '8' | '10' | '12';
  autoFit?: boolean;
  minWidth?: string;
  class?: string;
  [key: string]: any;
}

const { 
  cols = '1',
  colsMd,
  colsLg,
  gap = '6',
  autoFit = false,
  minWidth = '250px',
  class: className = '',
  ...rest
} = Astro.props;

const colClasses = {
  '1': 'grid-cols-1',
  '2': 'grid-cols-2',
  '3': 'grid-cols-3',
  '4': 'grid-cols-4',
  '5': 'grid-cols-5',
  '6': 'grid-cols-6',
  '12': 'grid-cols-12'
};

const gapClasses = {
  '1': 'gap-1',
  '2': 'gap-2',
  '3': 'gap-3',
  '4': 'gap-4',
  '5': 'gap-5',
  '6': 'gap-6',
  '8': 'gap-8',
  '10': 'gap-10',
  '12': 'gap-12'
};

let gridClasses = autoFit 
  ? `grid ${gapClasses[gap]} auto-fit-grid`
  : `grid ${colClasses[cols]} ${gapClasses[gap]}`;

if (!autoFit) {
  if (colsMd) {
    gridClasses += ` md:${colClasses[colsMd]}`;
  }

  if (colsLg) {
    gridClasses += ` lg:${colClasses[colsLg]}`;
  }
}

const classes = `${gridClasses} ${className}`;
---

<div class={classes} style={autoFit ? `grid-template-columns: repeat(auto-fit, minmax(${minWidth}, 1fr));` : ''} {...rest}>
  <slot />
</div>
